(function($){var hasPushState=(history&&history.pushState);var hasHashState=!hasPushState&&("onhashchange"in window)&&false;var router={};var routeList=[];var eventAdded=false;var currentUsedUrl=location.href;var firstRoute=true;router.currentId="";router.currentParameters={};router.capabilities={hash:hasHashState,pushState:hasPushState,timer:!hasHashState&&!hasPushState};router.reset=function()
{var router={};var routeList=[];router.currentId="";router.currentParameters={};}
router.add=function(route,id,callback)
{if(typeof id=="function")
{callback=id;delete id;}
var isRegExp=typeof route=="object";if(!isRegExp)
{if(route.lastIndexOf("/")==route.length- 1)
{route=route.substring(0,route.length- 1);}
route=route.replace(location.protocol+"//","").replace(location.hostname,"");}
var routeItem={route:route,callback:callback,type:isRegExp?"regexp":"string",id:id}
routeList.push(routeItem);if(!eventAdded)
{bindStateEvents();}};function bindStateEvents()
{eventAdded=true;router.fromHash=false;if(hasPushState)
{if(location.hash.indexOf("#!/")===0)
{var url=location.pathname+ location.hash.replace(/^#!\//gi,"");history.replaceState({},"",url);router.fromHash=true;}
$(window).bind("popstate",handleRoutes);}
else if(hasHashState)
{$(window).bind("hashchange.router",handleRoutes);}
else
{setInterval(function()
{if(location.href!=currentUsedUrl)
{handleRoutes();currentUsedUrl=location.href;}},500);}}
bindStateEvents();router.go=function(url,title)
{if(hasPushState)
{history.pushState({},title,url);checkRoutes();}
else
{url=url.replace(location.protocol+"//","").replace(location.hostname,"");var hash=url.replace(location.pathname,"");if(hash.indexOf("!")<0)
{hash="!/"+ hash;}
location.hash=hash;}};router.check=router.redo=function()
{checkRoutes(true);};function parseUrl(url)
{var currentUrl=url?url:location.pathname;currentUrl=decodeURI(currentUrl);if(!hasPushState)
{if(location.hash.indexOf("#!/")===0)
{currentUrl+=location.hash.substring(3);}
else
{return'';}}
currentUrl=currentUrl.replace(/\/$/,"");return currentUrl;}
router.parameters=function(url)
{var currentUrl=parseUrl(url);var list=getParameters(currentUrl);if(list.length==0)
{router.currentParameters={};}
else
{router.currentParameters=list[0].data;}
return router.currentParameters;}
function getParameters(url)
{var dataList=[];for(var i=0,ii=routeList.length;i<ii;i++)
{var route=routeList[i];if(route.type=="regexp")
{var result=url.match(route.route);if(result)
{var data={};data.matches=result;dataList.push({route:route,data:data});router.currentId=route.id;break;}}
else
{var currentUrlParts=url.split("/");var routeParts=route.route.split("/");if(routeParts.length==currentUrlParts.length)
{var data={};var matched=true;var matchCounter=0;for(var j=0,jj=routeParts.length;j<jj;j++)
{var isParam=routeParts[j].indexOf(":")===0;if(isParam)
{data[routeParts[j].substring(1)]=decodeURI(currentUrlParts[j]);matchCounter++;}
else
{if(routeParts[j]==currentUrlParts[j])
{matchCounter++;}}}
if(routeParts.length==matchCounter)
{dataList.push({route:route,data:data});router.currentId=route.id;router.currentParameters=data;break;}}}}
return dataList;}
function checkRoutes()
{var currentUrl=parseUrl(location.pathname);var actionList=getParameters(currentUrl);for(var i=0,ii=actionList.length;i<ii;i++)
{actionList[i].route.callback(actionList[i].data);}}
function handleRoutes(e)
{if(e!=null&&e.originalEvent&&e.originalEvent.state!==undefined)
{checkRoutes();}
else if(hasHashState)
{checkRoutes();}
else if(!hasHashState&&!hasPushState)
{checkRoutes();}}
if(!$.router)
{$.router=router;}
else
{if(window.console&&window.console.warn)
{console.warn("jQuery.status already defined. Something is using the same name.");}}})(jQuery);